x <- seq(1,,100,1)
x
x <- seq(1,100,1)
x
y <- x
plot(x,y)
a <- 2
a
plot a
plot(a)
eps <- 0.01
theta <- 1
thetaplus <- 3*(theta+eps)^2+2
thetaplus <- 3*(theta+eps)^3+2
thetaminus <- 3*(theta-eps)^2+2
num <- thetaplus - thetaminus
res <- num/(2*eps)
res
thetaminus <- 3*(theta-eps)^3+2
num <- thetaplus - thetaminus
res <- num/(2*eps)
res
x <- c(1,2,3,7,8,9)
y <. rep(0,6)
y <- rep(0,6)
mydata <- cbind(x,y)
mydata
clusters <- kmeans(mydata,2)
summary(clusters)
clusters
mydata <- iris
mydata
?kmeans
mydata[,1:4]
kmeans(mydata[1:4],3)
clusters <- kmeans(mydata[1:4],3)
mydata <-cbind(mydata, clusters)
mydata <-cbind(mydata, clusters$cluster)
View(mydata)
mydata <- c(0,363,486,418,534,177,397,
363,0,787,446,864,223,602,
486,787,0,884,125,658,247,
418,446,884,0,902,307,814,
534,864,125,902,0,711,367,
177,223,658,307,711,0,534,
397,602,247,814,367,534,0)
m1 <- matrix(mydata, 7,7)
rownames(m1) <- c("Roma", "Bari", "Milano", "Palermo", "Torino", "Napoli", "Venezia")
colnames(m1) <- c("Roma", "Bari", "Milano", "Palermo", "Torino", "Napoli", "Venezia")
m1.dist <- as.dist(m1)
m1
m1.dist
m1
hc <- hclust(m1.dist, "single")
plot(hc)
par(mfrow=c(1,2))
plot(hc)
plot(hc$height)
for(i in 1:length(hc$height)) lines(c(i,i),c(0,hc$height[i]),col=4)
plot(hc$height)
plot(hc$height, labels = TRUE)
plot(hc$height, label = TRUE)
a = c(65, 78, 88, 55, 48, 95, 66, 57, 79, 81)
t.test (a, mu=75)
a = c(5, 8, 8, 5, 8, 5, 6, 7, 9, 1)
t.test (a, mu=75)
x <- seq(0,4*pi, length = 1000)
y <- sin(x)
plot(x,y)
y1 <- sin(x+1)
plot(x,y1)
y <- ts(y)
y1 <- ts(y1)
ccf(y,y1)
acf(y)
ccf(y,y)
ccf(y,y1)
y1 <- lag(y)
plot(x,y)
plot(x,y1)
?lag
y1 <- lag(y, k = 100)
plot(x,y)
plot(x,y1)
y1 <- lag(y, k = 400)
plot(x,y)
plot(x,y1)
y1
s2 <- PlayTel("556c885a4623#")
install.packages("sound")
library(sound)
s2 <- PlayTel("556c885a4623#")
a <- rnorm(100000)
play(a)
findWavPlayer()
?signif
x <- c(173, 169, 176, 166, 161, 164, 160, 158, 180, 187)
y <- c(80, 68, 72, 75, 70, 65, 62, 60, 85, 92)
# plottiamo i punti e la retta di regressione
mod1 <- lm(y ~ x)
plot(x, y, xlim=c(min(x)-5, max(x)+5), ylim=c(min(y)-10, max(y)+10))
abline(mod1, lwd=2)
# calcoliamo (e approssimiamo) i residui e i valori predicted
res <- signif(residuals(mod1), 5)
pre <- predict(mod1)
segments(x, y, x, pre, col="red")
?segments
library(calibrate)
textxy(x, y, res, cx=0.7)
install.packages("calibrate")
library(calibrate)
textxy(x, y, res, cx=0.7)
install.packages("XML")
library(XML)
url <- "http://www.corrieredellosport.it/live/SerieA/statistiche/giocatori/gol.shtml"
url
tables <- readHTMLTable(url)
tables
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
n.rows
n.rows <- sapply(tables, function(t) dim(t)[1])
n.rows
sapply(tables, function(t) dim(t)[1])
url <- "http://www.corrieredellosport.it/calcio/serie_a/statistiche_classifiche_seriea.shtml"
tables <- readHTMLTable(url)
tables
url <- "http://www.corrieredellosport.it/live/SerieA/statistiche/giocatori/gol.shtml"
tables <- readHTMLTable(url)
n.rows <- sapply(tables, function(t) dim(t)[1])
tables[[which.max(n.rows)]]
a <- tables[[which.max(n.rows)]]
a <- data.frame(a)
View(a)
table(a, a$Squadra)
table(a$Squadra)
?table
table(a$Squadra, a$Gol)
tapply(a$Squadra, sum(a$Gol))
a$Gol <- as.numeric(a$Gol)
tapply(a$Squadra, sum(a$Gol))
table(a$Squadra, a$Gol)
tapply(a$Squadra, a$Gol, sum)
tapply(a$Gol, a$Squadra, sum)
url <- "http://www.corrieredellosport.it/live/SerieA/statistiche/giocatori/assist.shtml"
tables <- readHTMLTable(url)
n.rows <- sapply(tables, function(t) dim(t)[1])
n.rows <- sapply(tables, function(t) dim(t)[1])
a <- tables[[which.max(n.rows)]]
a
tapply(a$Gol, a$Squadra, sum)
tapply(a$Assist, a$Squadra, sum)
a$Assist <- as.numeric(a$Assist)
tapply(a$Assist, a$Squadra, sum)
url <- "http://www.borsaitaliana.it/borsa/azioni/listino-a-z.html?initial=A"
tables <- readHTMLTable(url)
n.rows <- sapply(tables, function(t) dim(t)[1])
n.rows <- sapply(tables, function(t) dim(t)[1])
a <- tables[[which.max(n.rows)]]
a
View(a)
url <- "http://netflixukvsusa.blogspot.it/2014/04/alphabetical-list-k-mon-apr-21-2014.html"
tables <- readHTMLTable(url)
n.rows <- sapply(tables, function(t) dim(t)[1])
n.rows <- sapply(tables, function(t) dim(t)[1])
a <- tables[[which.max(n.rows)]]
a
View(a)
tail(a)
install.packages("quantmod")
install.packages("plyr")
library(quantmod)
library(plyr)
symbols <- c("MSFT","C","VIA/B","MMM")
#1
l_ply(symbols, function(sym) try(getSymbols(sym)))
symbols <- symbols[symbols %in% ls()]
#2
sym.list <- llply(symbols, get)
#3
data <- xts()
for(i in seq_along(symbols)) {
symbol <- symbols[i]
data <- merge(data, get(symbol)[,paste(symbol, "Close", sep=".")])
}
library(quantmod)
library(plyr)
symbols <- c("MSFT","C","VIA/B","MMM")
#1
l_ply(symbols, function(sym) try(getSymbols(sym)))
symbols <- symbols[symbols %in% ls()]
#2
sym.list <- llply(symbols, get)
#3
data <- xts()
for(i in seq_along(symbols)) {
symbol <- symbols[i]
data <- merge(data, get(symbol)[,paste(symbol, "Close", sep=".")])
}
getSymbols('IBM',src='yahoo')
Ad(IBM)
Cl(IBM)
ClCl(IBM)
getSymbols('IBM',src='yahoo')
View(IBM)
getSymbols('MS.MI',src='yahoo')
View(MS.MI)
tail(MS.MI)
plot(MS.MI$MS.MI.Open)
getFinancials("MS.MI")
getFinancials("JAVA")
getFinancials("AAPL")
periodReturn(MS.MI)
a <- periodReturn(MS.MI)
plot(a)
plot(MS.MI$MS.MI.Open)
addSMA()
addSMA
addSMA(n = 10)
candleChart(MS.MI)
addSMA
addSMA()
addSMA(n = 100)
ccf(MS.MI$MS.MI.Open)
MS.MI$MS.MI.Open
serie <- ts(MS.MI$MS.MI.Open)
ccf(serie,serie)
acf(serie)
str(serie)
plot(serie)
url <- "https://it.finance.yahoo.com/q/cp?s=FTSEMIB.MI"
tables <- readHTMLTable(url)
n.rows <- sapply(tables, function(t) dim(t)[1])
n.rows <- sapply(tables, function(t) dim(t)[1])
a <- tables[[which.max(n.rows)]]
a
a
View(a)
url <- "https://it.finance.yahoo.com/q/cp?s=FTSEMIB.MI"
tables <- readHTMLTable(url)
n.rows <- sapply(tables, function(t) dim(t)[1])
n.rows <- sapply(tables, function(t) dim(t)[1])
a <- tables[[which.max(n.rows)]]
a
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
data <- download.file(url)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
data <- download.file(url, destfile = "american.csv")
data <- download.file(url, destfile = "american.csv", method = "curl")
data <- read.csv("american.csv")
View(data)
data[data$VAL>=24,]
data[data$VAL==24,]
data[data$VAL==24,1]
data[data$VAL==24,2]
a <- data[data$VAL==24,2]
a[is.na,]
is.na(a)
!is.na(a)
sum(!is.na(a))
data[,data$VAL]
data[,"data$VAL"]
data[,"VAL"]
data[,c("SERIALNO","VAL")]
a <- data[,c("SERIALNO","VAL")]
a["VAL" >= 24,]
test <- a["VAL" >= 24,]
test <- a["VAL" == 24,]
a$VAL == 24
sum(a$VAL == 24)
sum(a$VAL == 24, na.rm=TRUE)
a <- data[,c("SERIALNO","FES")]
View(a)
summary(a$FES)
unique(a$FES)
install.packages("XLS")
install.packages("XLSX")
install.packages("xlsx")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
library(xlsx)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url, destfile = "ngap.xlsx", method = "curl")
dat <- read.xlsx("ngap.xlsx", sheetIndex=1, colIndex=7:15, rowIndex=18:23)
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url,useInternalNodes=TRUE)
download.file(url, destfile = "rest.xml", method = "curl")
doc <- xmlTreeParse("rest.xml",useInternalNodes=TRUE)
cat(doc)
class(doc)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
rootNode[[1]]
rootNode[[1]][[3]]
xmlSApply(rootNode,xmlValue)
rootNode[[1]]
xpathSApply(rootNode,"//zipcode", xmlValue)
zips <- xpathSApply(rootNode,"//zipcode", xmlValue)
table(zips)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url, destfile = "american.csv", method = "curl")
library(data.table)
install.packages("data.table")
library(data.table)
data <- fread(destfile)
data <- fread("american.csv")
View(data)
class(data)
DT <- fread("american.csv")
rm(data)
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT$pwgtp15,by=DT$SEX)
View(DT)
DT$SEX
DT[,mean(pwgtp15),by=SEX]
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
x <- seq(-2,2,length= 1000)
y <- dnorm(x)
plot(x,y)
sum(y)
y
x <- seq(-6,6,length= 1000)
y <- dnorm(x)
plot(x,y)
dnorm
y <- dnorm(x, sd = 5)
plot(x,y)
y <- dnorm(x, sd = 0.5)
plot(x,y)
y <- qnorm(x, sd = 0.5)
y <- qnorm(x)
qnorm
qnorm(0)
qnorm(1)
qnorm(-1)
x <- seq(0,6,length= 1000)
y <- qnorm(x)
x <- seq(0,1,length= 1000)
y <- qnorm(x)
plot(x,y)
qqplot
?merge
library(knitr)
library(slidify)
install.packages("slidify")
pairs(airquality)
data(airquality)
library(xtable)
install.packages("xtable")
library("xtable")
xt <- xtable(fit)
fit <- lm(Ozone ~ Wind + Temp + Solar.R, data = airquality)
xt <- xtable(fit)
xt
print(xt, type="html")
xt
setwd("~/Coursera/RepData_PeerAssessment1")
data <- read.table(unz(activity.zip))
data <- read.table(unz("activity.zip"))
data <- read.table(unz("./activity.zip"))
?unz
data <- read.table(unz("","./activity.zip"))
data <- read.table(unz("./activity.zip",""))
data <- read.table(unz("./activity.zip"))
data <- read.table(unz("./activity.zip","activity.csv"))
data <- read.csv(unz("./activity.zip","activity.csv"))
data
data <- read.csv(unz("./activity.zip","activity.csv"))
data
View(data)
summary(data)
View(data)
tapply(data$steps,data$date,sum)
tapply(data$date,data$stepssum)
tapply(data$date,data$steps,sum)
tapply(data$steps,data$date,sum(na.rm=TRUE))
tapply(data$date,data$steps,sum)
unique(data$date)
tapply(data$steps,data$date,sum)
daily steps <- tapply(data$steps,data$date,sum)
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps)
barplot(dailySteps, col="blue", main ="Daily steps")
barplot(dailySteps, col="blue", main ="Daily steps taken")
dailySteps
tapply(data$steps,data$date,mean)
dailysteps
dailySteps
mean(dailySteps)
mean(dailySteps,na.rm=TRUE)
mean <- mean(dailySteps,na.rm=TRUE)
median <- median(dailySteps,na.rm=TRUE)
median
sum(is.na(data$steps))
2355*5
2355*5/60
2355+5
2360/60
table(data$date)
288*5
1440/60
5*287
288*5
summary(data$date)
summary(data$date)
data$date
61*288
5*(3-1)
5*(13-1)
60*24*5
60*24
60*24*60
2355+5
1440/5
plot(steps)
plot(data$steps)
plot(data$steps, type="l")
plot(data$steps,date$date type="l")
plot(data$steps,data$date, type="l")
plot(data$date,data$steps, type="l")
plot(data$date,data$steps, type="l")
plot(data$date,data$steps, type="p")
plot(data$date,data$steps, type="l")
line(data$date,data$steps, type="l")
lines(data$date,data$steps, type="l")
plot()
plot(data$date,data$steps, type="l")
plot(data$date,data$steps, type="line")
library(ggplot2)
qplot(data$date, data$steps)
qplot(data$date, data$steps, geom="line")
plot(data$steps, type="l")
mean_result <- mean(dailySteps,na.rm=TRUE)
median_result <- median(dailySteps,na.rm=TRUE)
mean_result
dailySteps
plot(dailySteps, type="l")
plot(averageDailySteps, type="pl", main ="Pattern of average daily steps", ylab="Average Daily steps", xlab="Day")
points(averageDailySteps, pch=19)
averageDailySteps <- tapply(data$steps,data$date,mean)
plot(averageDailySteps, type="l", main ="Pattern of average daily steps", ylab="Average Daily steps", xlab="Day")
points(averageDailySteps, pch=19)
averageDailySteps <- tapply(data$steps,data$date,mean)
plot(averageDailySteps, type="l", main ="Pattern of average daily steps", ylab="Average Daily steps", xlab="Day")
points(averageDailySteps, pch=19)
abline(30)
averageDailySteps <- tapply(data$steps,data$date,mean)
plot(averageDailySteps, type="l", main ="Pattern of average daily steps", ylab="Average Daily steps", xlab="Day")
points(averageDailySteps, pch=19)
max(data$steps)
max(data$steps, na.rm=TRUE)
which(max(data$steps, na.rm=TRUE))
?which
which(data$steps == max(data$steps, na.rm=TRUE))
best_day <- which(data$steps == max(data$steps, na.rm=TRUE))
data$date[bestday]
data[bestday,"date"]
data[best_day,"date"]
data$date[best_day]
max(dailySteps)
max(averageDailySteps)
max(averageDailySteps,na.rm=TRUE)
bestDay <- max(averageDailySteps,na.rm=TRUE)
averageDailySteps[bestDay]
bestDay <- which(max(averageDailySteps,na.rm=TRUE))
averageDailySteps[bestDay]
bestDay <- which(averageDailySteps == max(averageDailySteps,na.rm=TRUE))
averageDailySteps[bestDay]
