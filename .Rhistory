ClCl(IBM)
getSymbols('IBM',src='yahoo')
View(IBM)
getSymbols('MS.MI',src='yahoo')
View(MS.MI)
tail(MS.MI)
plot(MS.MI$MS.MI.Open)
getFinancials("MS.MI")
getFinancials("JAVA")
getFinancials("AAPL")
periodReturn(MS.MI)
a <- periodReturn(MS.MI)
plot(a)
plot(MS.MI$MS.MI.Open)
addSMA()
addSMA
addSMA(n = 10)
candleChart(MS.MI)
addSMA
addSMA()
addSMA(n = 100)
ccf(MS.MI$MS.MI.Open)
MS.MI$MS.MI.Open
serie <- ts(MS.MI$MS.MI.Open)
ccf(serie,serie)
acf(serie)
str(serie)
plot(serie)
url <- "https://it.finance.yahoo.com/q/cp?s=FTSEMIB.MI"
tables <- readHTMLTable(url)
n.rows <- sapply(tables, function(t) dim(t)[1])
n.rows <- sapply(tables, function(t) dim(t)[1])
a <- tables[[which.max(n.rows)]]
a
a
View(a)
url <- "https://it.finance.yahoo.com/q/cp?s=FTSEMIB.MI"
tables <- readHTMLTable(url)
n.rows <- sapply(tables, function(t) dim(t)[1])
n.rows <- sapply(tables, function(t) dim(t)[1])
a <- tables[[which.max(n.rows)]]
a
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
data <- download.file(url)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
data <- download.file(url, destfile = "american.csv")
data <- download.file(url, destfile = "american.csv", method = "curl")
data <- read.csv("american.csv")
View(data)
data[data$VAL>=24,]
data[data$VAL==24,]
data[data$VAL==24,1]
data[data$VAL==24,2]
a <- data[data$VAL==24,2]
a[is.na,]
is.na(a)
!is.na(a)
sum(!is.na(a))
data[,data$VAL]
data[,"data$VAL"]
data[,"VAL"]
data[,c("SERIALNO","VAL")]
a <- data[,c("SERIALNO","VAL")]
a["VAL" >= 24,]
test <- a["VAL" >= 24,]
test <- a["VAL" == 24,]
a$VAL == 24
sum(a$VAL == 24)
sum(a$VAL == 24, na.rm=TRUE)
a <- data[,c("SERIALNO","FES")]
View(a)
summary(a$FES)
unique(a$FES)
install.packages("XLS")
install.packages("XLSX")
install.packages("xlsx")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
library(xlsx)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url, destfile = "ngap.xlsx", method = "curl")
dat <- read.xlsx("ngap.xlsx", sheetIndex=1, colIndex=7:15, rowIndex=18:23)
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url,useInternalNodes=TRUE)
download.file(url, destfile = "rest.xml", method = "curl")
doc <- xmlTreeParse("rest.xml",useInternalNodes=TRUE)
cat(doc)
class(doc)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
rootNode[[1]]
rootNode[[1]][[3]]
xmlSApply(rootNode,xmlValue)
rootNode[[1]]
xpathSApply(rootNode,"//zipcode", xmlValue)
zips <- xpathSApply(rootNode,"//zipcode", xmlValue)
table(zips)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url, destfile = "american.csv", method = "curl")
library(data.table)
install.packages("data.table")
library(data.table)
data <- fread(destfile)
data <- fread("american.csv")
View(data)
class(data)
DT <- fread("american.csv")
rm(data)
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT$pwgtp15,by=DT$SEX)
View(DT)
DT$SEX
DT[,mean(pwgtp15),by=SEX]
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
x <- seq(-2,2,length= 1000)
y <- dnorm(x)
plot(x,y)
sum(y)
y
x <- seq(-6,6,length= 1000)
y <- dnorm(x)
plot(x,y)
dnorm
y <- dnorm(x, sd = 5)
plot(x,y)
y <- dnorm(x, sd = 0.5)
plot(x,y)
y <- qnorm(x, sd = 0.5)
y <- qnorm(x)
qnorm
qnorm(0)
qnorm(1)
qnorm(-1)
x <- seq(0,6,length= 1000)
y <- qnorm(x)
x <- seq(0,1,length= 1000)
y <- qnorm(x)
plot(x,y)
qqplot
data <- read.csv(unz("./activity.zip","activity.csv"))
setwd("~/Coursera/RepData_PeerAssessment1")
data <- read.csv(unz("./activity.zip","activity.csv"))
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
mean_result <- mean(dailySteps,na.rm=TRUE)
median_result <- median(dailySteps,na.rm=TRUE)
averageDailySteps <- tapply(data$steps,data$date,mean)
plot(averageDailySteps, type="l", main ="Pattern of average daily steps", ylab="Average Daily steps", xlab="Day")
points(averageDailySteps, pch=19)
View(data)
dcast(data, date+interval Ëœ)
dcast(data, date+interval ~ steps)
library(reshape2)
dcast(data, date+interval ~ steps)
interval_table <- dcast(data, interval+date ~ steps)
View(interval_table)
interval_table <- dcast(data, interval ~ date+steps)
View(interval_table)
interval_table <- dcast(data, interval ~ date)
View(interval_table)
interval_table <- dcast(data, steps ~ date+interval)
View(interval_table)
?dcast
interval_table <- dcast(data, interval+date ~ steps, sum)
interval_table <- dcast(data, interval+date ~ steps)
View(interval_table)
interval_table <- dcast(data, date+interval ~ steps)
View(interval_table)
max(data$steps)
max(data$steps,na.rm=TRUE)
interval_table <- dcast(data, date+interval ~ steps, max)
interval_table <- dcast(data, date ~ interval, value.var=steps)
interval_table <- dcast(data, date ~ interval, value.var="steps")
View(interval_table)
interval_table <- dcast(data, interval ~ date, value.var="steps")
View(interval_table)
tapply(data$date,data$steps,max)
tapply(data$steps,data$interval,max)
averageDailySteps <- tapply(data$steps,data$date,mean)
plot(averageDailySteps, type="l", main ="Pattern of average daily steps", ylab="Average Daily steps", xlab="Day")
points(averageDailySteps, pch=19)
interval_table <- dcast(data, interval ~ date, max, value.var="steps")
interval_table <- dcast(data, interval ~ date, fun.aggregate=max, value.var="steps")
interval_table <- dcast(data, interval ~ date, fun.aggregate="max", value.var="steps")
?dcast
max(interval_table)
max(interval_table[2:61])
max(interval_table[,2:61])
max(interval_table[,2:61], na.rm=TRUE)
interval_table[,2:61])
interval_table[,2:61]
sapply(data,data[,2:61],max)
sapply(data[,2:61],data[,2:61],max)
?sapply
sapply(data[,2:61],data[,2:61],max)
sapply(data[,2:61],max)
data[,2:61]
sapply(interval_table[,2:61],max)
max
?max
sapply(interval_table[,2:61],which.max)
max_intervals <- sapply(interval_table[,2:62],which.max)
interval_table <- dcast(data, interval ~ date, value.var="steps")
max_intervals <- sapply(interval_table[,2:62],which.max)
interval_table[max_intervals,1]
max_intervals[[1]]
max_intervals[[2]]
unlist(max_intervals)
max_intervals <- unlist(sapply(interval_table[,2:62],which.max))
interval_table[max_intervals,1]
table(interval_table[max_intervals,1])
max(table(interval_table[max_intervals,1]))
which.max(table(interval_table[max_intervals,1]))
which.max(table(interval_table[max_intervals,1]))[1]
row.names(which.max(table(interval_table[max_intervals,1])))
colnames(which.max(table(interval_table[max_intervals,1])))
a <- which.max(table(interval_table[max_intervals,1]))
a
name(a)
names(a)
max_interval <- which.max(table(interval_table[max_intervals,1]))
names(max_interval)
View(interval_table)
max_interval
max_interval[1]
max_interval[[1]]
max_interval[[2]]
max_interval <- which.max(table(interval_table[max_intervals,1]))
max_interval
interval_table <- dcast(data, interval ~ date, value.var="steps")
max_intervals <- unlist(sapply(interval_table[,2:62],which.max))
max_interval <- which.max(table(interval_table[max_intervals,1]))
names(max_interval)
max_interval[[1]]
max_intervals
max_interval <- which.max(table(interval_table[max_intervals,1]))
max_intervals
max_interval <- which.max(table(interval_table[max_intervals,1]))
max_interval
table(max_intervals)
max(table(max_intervals))
names(which.max(table(max_intervals)))
interval_table[names(which.max(table(max_intervals))),1]
max_intervals <- table(unlist(sapply(interval_table[,2:62],which.max)))
max_intervals
max(max_intervals)
colnames(which.max(max_intervals))
which.max(max_intervals)
interval_table <- dcast(data, interval ~ date, value.var="steps")
max_intervals <- unlist(sapply(interval_table[,2:62],which.max))
max(table(max_intervals))
interval_table[names(which.max(table(max_intervals))),1]
View(interval_table)
dcast(data, interval+date,fun.aggregate=max, value.var="steps")
interval_table
View(interval_table)
tapply(interval_table,interval_table[2:62],which.max)
tapply(interval_table,interval_table[,2:62],which.max)
?tapply
tapply(interval_table[,1],interval_table[,2:62],which.max)
tapply(interval_table[,1],interval_table[,2:62],which.max)
lapply(interval_table[,2:62],which.max)
sapply(interval_table[,2:62],which.max)
unlist(lapply(interval_table[,2:62],which.max))
head(interval_table)
max_intervals
interval_table[names(which.max(table(max_intervals))),"interval"]
max(table(max_intervals))
815/60
815/60
14*60
13*60
815-760
round(815/60)
floor(815/60)
815-(floor(815/60)*60)
13*60
815-(floor(815/60)*60)
paste0(floor(max_interval/60),":",max_interval-(floor(max_interval/60)*60))
815-(max_interval(815/60)*60)
max_interval
max_vect <- unlist(sapply(interval_table[,2:62],which.max))
max_interval <- interval_table[names(which.max(table(max_vect))),"interval"]
max_days <- max(table(max_vect))
paste0(floor(max_interval/60),":",max_interval-(floor(max_interval/60)*60))
sapply(interval_table[1:288,],mean)
a <- sapply(interval_table[1:288,],mean)
a
a <- sapply(interval_table,mean)
a
a <- sapply(t(interval_table),mean)
a
?melt
dcast(data,interval,fun.aggregate=mean)
tmp <- data[!(is.na(data$steps)),]
View(tmp)
sapply(tmp$steps,tmp$interval,mean)
tapply(tmp$steps,tmp$interval,mean)
View(interval_table)
library(ggplot2)
qplot(data$steps,data$interval, col=data$date)
qplot(data$interval,data$steps, col=data$date)
qplot(data$interval,data$steps, col=data$date, geom_line)
qplot(data$interval,data$steps, col=data$date, geom="line")
sample_dates <- sample(unique(data$date),10)
sample_dates
qplot(data[(data$date %in% sample_dates),"interval"],data[(data$date %in% sample_dates),"steps"], col=data$date, geom="line")
sample <- subset(data, data$date == sample_dates)
sample <- subset(data, data$date %in% sample_dates)
sample
sample_dates <- sample(unique(data$date != na),10)
sample_dates <- sample(unique(data[("steps" != na),"date"]),10)
sample_dates <- sample(unique(data[(!is.na(data$steps)),"date"]),10)
sample <- subset(data, data$date == sample_dates)
sample <- subset(data, data$date %in% sample_dates)
sample
qplot(sample$interval,sample$steps, col=sample$date, geom="line")
set.seed(1234)
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps")
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps", legend(title="Date"))
set.seed(1234)
sample_dates <- sample(unique(data[(!is.na(data$steps)),"date"]),5)
sample <- subset(data, data$date == sample_dates)
library(ggplot2)
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps", legend(title="Date"))
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps") + guide_legend(title="Date")
set.seed(1234)
sample_dates <- sample(unique(data[(!is.na(data$steps)),"date"]),5)
sample <- subset(data, data$date == sample_dates)
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps") + guide_legend(title="Date")
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps") + guides(guide_legend(title="Date"))
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps") + guides(full=guide_legend(title="Date"))
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps") + guides(fill=guide_legend(title="Date"))
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps")
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps") + scale_fill_discrete(name="Experimental\nCondition")
?labs
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps") + labs(legend="")
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps") + labs(legendtitle="")
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps") + labs(col="Date")
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps") + labs(col="Sampled Date")
500/60
tapply(tmp$steps,tmp$interval,mean)
tapply(data$steps,data$interval,mean)
tapply(tmp$steps,tmp$interval,mean)
a <- tapply(tmp$steps,tmp$interval,mean)
a
subset_data <- subset(data, !is.na(data$steps))
avg_intervals <- tapply(subset_data$steps,subset_data$interval,mean)
is.na(data$steps)
set.seed(1234)
sample_dates <- sample(unique(data[(!is.na(data$steps)),"date"]),10)
sample <- subset(data, data$date == sample_dates)
library(ggplot2)
qplot(sample$interval,sample$steps, col=sample$date, geom="line", xlab="interval", ylab="No. of steps") + labs(col="Sampled Date")
set.seed(1234)
sample_dates <- sample(unique(data[(!is.na(data$steps)),"date"]),10)
sample <- subset(data, data$date == sample_dates)
subset_data <- subset(data, !is.na(data$steps))
avg_intervals <- tapply(subset_data$steps,subset_data$interval,mean)
```
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
Repository comes with data compressed in file **activity.zip**.  Inside the zip archive, file **activity.csv** contains the data. It is possible to read fetch data directly in **data** dataframe without unarchiving the zip file:
```{r}
data <- read.csv(unz("./activity.zip","activity.csv"))
```
## What is mean total number of steps taken per day?
Histogram of the total number of steps taken each day indicates the dataset includes days with "0" and/or NA entries.
```{r}
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
```
Mean and median calculations must therefore take into acount presence of NA's values.
```{r, results='hide'}
mean_result <- mean(dailySteps,na.rm=TRUE)
median_result <- median(dailySteps,na.rm=TRUE)
```
Above calcualations give output values:
- mean of total steps taken per day: `r mean_result`
- median of total steps taken per day: `r median_result`
## What is the average daily activity pattern?
The pattern of average daily steps indicates most days are in the range of 30-50 steps:
```{r}
averageDailySteps <- tapply(data$steps,data$date,mean)
plot(averageDailySteps, type="l", main ="Pattern of average daily steps", ylab="Average Daily steps", xlab="Day")
points(averageDailySteps, pch=19)
```
In order to identify which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps; data are reshaped in a table with **"interval"** in rows and **"date"** in columns:
```{r}
library(reshape2)
interval_table <- dcast(data, interval ~ date, value.var="steps")
```
From **interval_table** new dataframe, vector of intervals with the maximum number of steps per each day is extracted and stored in **max_interval**, together with number of occurences in **max_days**:
```{r}
max_vect <- unlist(sapply(interval_table[,2:62],which.max))
max_interval <- interval_table[names(which.max(table(max_vect))),"interval"]
max_days <- max(table(max_vect))
```
Code above leads to this result:
- In `r max_days` (ie. "max_days") different days maximum number of daily steps occurs during interval `r max_interval` (ie. "max_interval")
Interval that in **hours:minutes** format is equivalent to 5 minutes interval starting from:
```{r}
paste0(floor(max_interval/60),":",max_interval-(floor(max_interval/60)*60))
```
## Imputing missing values
Count of NA's values gives the following result:
```{r}
sum(is.na(data$steps))
```
Strategy chosen to impute the missing values is replacing NA's value with the mean value of all the same 5-minutes intervals across all the days.
```{r}
subset_data <- subset(data, !is.na(data$steps))
avg_intervals <- tapply(subset_data$steps,subset_data$interval,mean)
data <- read.csv(unz("./activity.zip","activity.csv"))
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
mean_result <- mean(dailySteps,na.rm=TRUE)
median_result <- median(dailySteps,na.rm=TRUE)
averageDailySteps <- tapply(data$steps,data$date,mean)
plot(averageDailySteps, type="l", main ="Pattern of average daily steps", ylab="Average Daily steps", xlab="Day")
points(averageDailySteps, pch=19)
library(reshape2)
interval_table <- dcast(data, interval ~ date, value.var="steps")
max_vect <- unlist(sapply(interval_table[,2:62],which.max))
max_interval <- interval_table[names(which.max(table(max_vect))),"interval"]
max_days <- max(table(max_vect))
paste0(floor(max_interval/60),":",max_interval-(floor(max_interval/60)*60))
sum(is.na(data$steps))
```
sum(is.na(data$steps))
subset_data <- subset(data, !is.na(data$steps))
avg_intervals <- tapply(subset_data$steps,subset_data$interval,mean)
avg_intervals
avg_intervals[2335]
avg_intervals["2355"]
length(data)
length(data[1])
length(data[1,])
length(data$steps)
data$steps[1]
data$interval[1]
avg_intervals[0]
avg_intervals["0"]
avg_intervals[as.character(0)]
subset_data <- subset(data, !is.na(data$steps))
avg_intervals <- tapply(subset_data$steps,subset_data$interval,mean)
filled_data <- data
View(filled_data)
for (i in 1:length(filled_data$steps)){
if(is.na(filled_data$steps[i])){
interval <- filled_data$interval[i]
filled_data$steps[i] <- avg_intervals[as.character(interval)]
}
}
View(filled_data)
avg_intervals
filled_data
library(lubridate)
install.packages("lubridate")
library(lubridate)
day(filled_data$date)
day(filled_data$date)
wday(filled_data$date)
wday(filled_data$date,label=TRUE)
filled_data$day <- wday(filled_data$date,label=TRUE)
ifelse(filled_data$day == "Sun" | filled_data$day == "Sat","weekedn","weekday")
filled_data$day_type <- ifelse(filled_data$day == "Sun" | filled_data$day == "Sat","weekend","weekday")
qplot(filled_data$interval,filled_data$steps, facets=.~filled_data$day_type, geom="line", xlab="interval", ylab="No. of steps")
filled_data$day <- wday(filled_data$date,label=TRUE,abbr=FALSE)
filled_data$day_type <- ifelse(filled_data$day == "Sunday" | filled_data$day == "Saturday","weekend","weekday")
qplot(filled_data$interval,filled_data$steps, facets=.~filled_data$day_type, geom="line", xlab="interval", ylab="No. of steps")
qplot(interval,steps, data=filled_data, facets=.~day_type, geom="line", xlab="interval", ylab="No. of steps")
qplot(interval,steps, data=filled_data, facets=day_type~., geom="line", xlab="interval", ylab="No. of steps")
View(interval_table)
new_interval_table <- dcast(filled_data, interval ~ day_type, fun.aggregate=mean, value.var="steps")
View(new_interval_table)
filled_data$day <- wday(filled_data$date,label=TRUE,abbr=FALSE)
filled_data$day_type <- ifelse(filled_data$day == "Sunday" | filled_data$day == "Saturday","weekend","weekday")
average_data <- dcast(filled_data, interval ~ day_type, fun.aggregate=mean, value.var="steps")
qplot(interval,steps, data=average_data, facets=day_type~., geom="line", xlab="interval", ylab="No. of steps")
average_data
View(average_data)
melt(average_data)
average_data <- dcast(filled_data, interval ~ day_type, fun.aggregate=mean, value.var="steps")
average_data <- melt(average_data)
average8data
average_data
average_data <- dcast(filled_data, interval ~ day_type, fun.aggregate=mean, value.var="steps")
average_data <- dcast(filled_data, interval ~ day_type, fun.aggregate=mean, value.var="steps")
qplot(interval,steps, data=average_data, facets=day_type~., geom="line", xlab="interval", ylab="No. of steps")
