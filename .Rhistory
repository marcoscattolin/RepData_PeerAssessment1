cross.correlations[[k]] <- ccf(ts(data[,i]),ts(data[,j]), lag.max = 5)
label <- paste(clean.symbols[i],clean.symbols[j],sep ="  ")
if (k == 1){
acf.values <- data.frame(cross.correlations[[1]]$lag,cross.correlations[[1]]$acf)
colnames(acf.values) <- c("lag", label)
} else {acf.values <- data.frame(acf.values,cross.correlations[[k]]$acf)}
}
View(acf.values)
colnames(acf.values)
#itera lungo le combinazioni 2 a 2
comb <- combn(length(data),2)
cross.correlations <- list()
for(k in 1:length(comb[1,])){
i <- comb[1,k]
j <- comb[2,k]
cross.correlations[[k]] <- ccf(ts(data[,i]),ts(data[,j]), lag.max = 5)
label <- paste(clean.symbols[i],clean.symbols[j],sep ="  ")
if (k == 1){
acf.values <- data.frame(cross.correlations[[1]]$lag,cross.correlations[[1]]$acf)
colnames(acf.values) <- c("lag", label)
} else {
acf.values <- data.frame(acf.values,cross.correlations[[k]]$acf)
colnames(acf.values) <- c(colnames(acf.values), label)
}
}
#itera lungo le combinazioni 2 a 2
comb <- combn(length(data),2)
cross.correlations <- list()
for(k in 1:length(comb[1,])){
i <- comb[1,k]
j <- comb[2,k]
cross.correlations[[k]] <- ccf(ts(data[,i]),ts(data[,j]), lag.max = 5)
label <- paste(clean.symbols[i],clean.symbols[j],sep ="  ")
if (k == 1){
acf.values <- data.frame(cross.correlations[[1]]$lag,cross.correlations[[1]]$acf)
colnames(acf.values) <- c("lag", label)
} else {
acf.values <- data.frame(acf.values,cross.correlations[[k]]$acf)
colnames(acf.values) <- c(colnames(acf.values), label)
}
}
traceback()
#itera lungo le combinazioni 2 a 2
comb <- combn(length(data),2)
cross.correlations <- list()
for(k in 1:1){
i <- comb[1,k]
j <- comb[2,k]
cross.correlations[[k]] <- ccf(ts(data[,i]),ts(data[,j]), lag.max = 5)
label <- paste(clean.symbols[i],clean.symbols[j],sep ="  ")
if (k == 1){
acf.values <- data.frame(cross.correlations[[1]]$lag,cross.correlations[[1]]$acf)
colnames(acf.values) <- c("lag", label)
} else {
acf.values <- data.frame(acf.values,cross.correlations[[k]]$acf)
colnames(acf.values) <- c(colnames(acf.values), label)
}
}
View(acf.values)
#itera lungo le combinazioni 2 a 2
comb <- combn(length(data),2)
cross.correlations <- list()
for(k in 1:2){
i <- comb[1,k]
j <- comb[2,k]
cross.correlations[[k]] <- ccf(ts(data[,i]),ts(data[,j]), lag.max = 5)
label <- paste(clean.symbols[i],clean.symbols[j],sep ="  ")
if (k == 1){
acf.values <- data.frame(cross.correlations[[1]]$lag,cross.correlations[[1]]$acf)
colnames(acf.values) <- c("lag", label)
} else {
acf.values <- data.frame(acf.values,cross.correlations[[k]]$acf)
colnames(acf.values) <- c(colnames(acf.values), label)
}
}
View(acf.values)
colnames(acf.values)
colnames(acf.values)-1
colnames(acf.values[,1:2])
#itera lungo le combinazioni 2 a 2
comb <- combn(length(data),2)
cross.correlations <- list()
for(k in 1:2){
i <- comb[1,k]
j <- comb[2,k]
cross.correlations[[k]] <- ccf(ts(data[,i]),ts(data[,j]), lag.max = 5)
label <- paste(clean.symbols[i],clean.symbols[j],sep ="  ")
if (k == 1){
acf.values <- data.frame(cross.correlations[[1]]$lag,cross.correlations[[1]]$acf)
colnames(acf.values) <- c("lag", label)
} else {
acf.values <- data.frame(acf.values,cross.correlations[[k]]$acf)
colnames(acf.values) <- c(colnames(acf.values[,1:k]), label)
}
}
View(acf.values)
length(comb)
length(comb[,1])
length(comb[1,])
#itera lungo le combinazioni 2 a 2
comb <- combn(length(data),2)
cross.correlations <- list()
for(k in 1:length(comb[1,])){
i <- comb[1,k]
j <- comb[2,k]
cross.correlations[[k]] <- ccf(ts(data[,i]),ts(data[,j]), lag.max = 5)
label <- paste(clean.symbols[i],clean.symbols[j],sep ="  ")
if (k == 1){
acf.values <- data.frame(cross.correlations[[1]]$lag,cross.correlations[[1]]$acf)
colnames(acf.values) <- c("lag", label)
} else {
acf.values <- data.frame(acf.values,cross.correlations[[k]]$acf)
colnames(acf.values) <- c(colnames(acf.values[,1:k]), label)
}
}
View(acf.values)
plot(cross.correlations[[18]])
plot(cross.correlations[[19]])
plot(cross.correlations[[20]])
returns
str(returns)
class(returns[1])
class(returns[[1]])
plot(returns[[1]])
plot(returns[1])
View(data)
plot(cross.correlations[[20]])
library(quantmod)
symbols <- c("^N225","^HSI","FTSEMIB.MI","^FTSE","^GDAXI","^FCHI","^NDX","^STOXX50E","^GSPTSE","^BVSP")
clean.symbols <- c("NDX","FTSEMIB.MI","FTSE","STOXX50E","N225","HSI","BVSP")
symblist <- list()
for (i in 1:length(symbols)){
symblist[[i]] <- getSymbols(symbols[i], src = "yahoo", auto.assign=FALSE)
}
rm(i)
#merge dei dataframe
returns <- lapply(symblist, function(x) periodReturn(x, period = "daily"))
returns <- Reduce(function(...) merge(..., all=T), returns)
data <- data.frame(returns)
colnames(data) <- c(clean.symbols)
data <- data[complete.cases(data),]
#itera lungo le combinazioni 2 a 2
comb <- combn(length(data),2)
cross.correlations <- list()
for(k in 1:length(comb[1,])){
i <- comb[1,k]
j <- comb[2,k]
cross.correlations[[k]] <- ccf(ts(data[,i]),ts(data[,j]), lag.max = 5)
label <- paste(clean.symbols[i],clean.symbols[j],sep ="  ")
if (k == 1){
acf.values <- data.frame(cross.correlations[[1]]$lag,cross.correlations[[1]]$acf)
colnames(acf.values) <- c("lag", label)
} else {
acf.values <- data.frame(acf.values,cross.correlations[[k]]$acf)
colnames(acf.values) <- c(colnames(acf.values[,1:k]), label)
}
}
#se esiste un valore significativo presente su lag negativo,
#allora il primo segnale predice il secondo
plot(cross.correlations[[20]])
View(data)
View(acf.values)
a <- "^N225"
a
library(stringr)
str_replace
str_replace(a,"N","")
str_replace(a,"","")
str_replace(a,"^","")
str_replace(a,"^","")
str_extract(a,"[a-b][A-B][0-9]","")
str_extract(a,"[a-b][A-B][0-9]")
strings <- c(" 219 733 8965", "329-293-8753 ", "banana", "595 794 7569",
"387 287 6718", "apple", "233.398.9187  ", "482 952 3315",
"239 923 8115", "842 566 4692", "Work: 579-499-7527", "$1000",
"Home: 543.355.3679")
phone <- "([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})"
str_extract(strings, phone)
A
a
pattern <- "[a-b][A-B][0-9]"
str_extract(a,pattern)
a
pattern
pattern <- "([a-b][A-B][0-9])"
str_extract(a,pattern)
pattern <- "[:alnum:]"
str_extract(a,pattern)
pattern <- "[a-zA-Z0-9]"
str_extract(a,pattern)
pattern <- "[a-z,A-Z,0-9]"
str_extract(a,pattern)
pattern <- "[A-Z,0-9]"
str_extract(a,pattern)
pattern <- "[:upper:]"
str_extract(a,pattern)
pattern <- "[A-Z][A-Z]"
str_extract(a,pattern)
pattern <- "[A-Z][0-9]"
str_extract(a,pattern)
shopping_list <- c("apples x4", "flour", "sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
str_extract(shopping_list, "[a-z]{1,4}")
str_extract(shopping_list, "\\b[a-z]{1,4}\\b")
pattern <- "[A-Z]+"
str_extract(a,pattern)
str_extract(a,[A-Z]+)
str_extract(a,"[A-Z]+")
str_extract(a,"[A-Z0-9]+")
symbols <- c("^N225","^HSI","FTSEMIB.MI","^FTSE","^GDAXI","^FCHI","^NDX","^STOXX50E","^GSPTSE","^BVSP")
clean.symbols <- str_extract(symbols,"[A-Z0-9]+")
clean.symbols
library(quantmod)
symbols <- c("^N225","^HSI","FTSEMIB.MI","^FTSE","^GDAXI","^FCHI","^NDX","^STOXX50E","^GSPTSE","^BVSP")
clean.symbols <- str_extract(symbols,"[A-Z0-9]+")
symblist <- list()
for (i in 1:length(symbols)){
symblist[[i]] <- getSymbols(symbols[i], src = "yahoo", auto.assign=FALSE)
}
rm(i)
#merge dei dataframe
returns <- lapply(symblist, function(x) periodReturn(x, period = "daily"))
returns <- Reduce(function(...) merge(..., all=T), returns)
data <- data.frame(returns)
colnames(data) <- c(clean.symbols)
data <- data[complete.cases(data),]
#itera lungo le combinazioni 2 a 2
comb <- combn(length(data),2)
cross.correlations <- list()
for(k in 1:length(comb[1,])){
i <- comb[1,k]
j <- comb[2,k]
cross.correlations[[k]] <- ccf(ts(data[,i]),ts(data[,j]), lag.max = 5)
label <- paste(clean.symbols[i],clean.symbols[j],sep ="  ")
if (k == 1){
acf.values <- data.frame(cross.correlations[[1]]$lag,cross.correlations[[1]]$acf)
colnames(acf.values) <- c("lag", label)
} else {
acf.values <- data.frame(acf.values,cross.correlations[[k]]$acf)
colnames(acf.values) <- c(colnames(acf.values[,1:k]), label)
}
}
#se esiste un valore significativo presente su lag negativo,
#allora il primo segnale predice il secondo
plot(cross.correlations[[20]])
View(acf.values)
symbols <- c("FTSEMIB.MI","^FTSE","^GDAXI","^FCHI","^NDX","^STOXX50E","^GSPTSE","^BVSP")
clean.symbols <- str_extract(symbols,"[A-Z0-9]+")
symblist <- list()
for (i in 1:length(symbols)){
symblist[[i]] <- getSymbols(symbols[i], src = "yahoo", auto.assign=FALSE)
}
rm(i)
#merge dei dataframe
returns <- lapply(symblist, function(x) periodReturn(x, period = "daily"))
returns <- Reduce(function(...) merge(..., all=T), returns)
data <- data.frame(returns)
colnames(data) <- c(clean.symbols)
data <- data[complete.cases(data),]
#itera lungo le combinazioni 2 a 2
comb <- combn(length(data),2)
cross.correlations <- list()
for(k in 1:length(comb[1,])){
i <- comb[1,k]
j <- comb[2,k]
cross.correlations[[k]] <- ccf(ts(data[,i]),ts(data[,j]), lag.max = 5)
label <- paste(clean.symbols[i],clean.symbols[j],sep ="  ")
if (k == 1){
acf.values <- data.frame(cross.correlations[[1]]$lag,cross.correlations[[1]]$acf)
colnames(acf.values) <- c("lag", label)
} else {
acf.values <- data.frame(acf.values,cross.correlations[[k]]$acf)
colnames(acf.values) <- c(colnames(acf.values[,1:k]), label)
}
}
#se esiste un valore significativo presente su lag negativo,
#allora il primo segnale predice il secondo
plot(cross.correlations[[20]])
rm(i,j,k)
rm(i,j,k,label)
View(acf.values)
library(data.table)
install.packages("data.table")
install.packages("knitr")
library(knitr)
data <- read.csv(unz("./activity.zip","activity.csv"))
setwd("~/GitHub/RepData_PeerAssessment1")
data <- read.csv(unz("./activity.zip","activity.csv"))
dailySteps <- tapply(data$steps,data$date,sum)
data
View(data)
data
library(reshape2)
dcast(data=data,date ~ steps, fun.aggregate=sum, na.rm=TRUE)
a <- dcast(data=data,date ~ steps, fun.aggregate=sum, na.rm=TRUE)
View(a)
a <- dcast(data=data,date, fun.aggregate=sum, na.rm=TRUE)
a <- dcast(data=data,date~date, fun.aggregate=sum, na.rm=TRUE)
a
View(a)
a <- dcast(data=data,date~., fun.aggregate=sum, na.rm=TRUE)
View(data)
data$variable <- "steps"
a <- dcast(data=data,date~variable, fun.aggregate=sum, na.rm=TRUE)
a <- dcast(data=data,date~variable, fun.aggregate=sum, value.var="steps", na.rm=TRUE)
a
View(a)
library(ggplot2)
qplot(a$steps)
plot(a$steps,a$date)
plot(a$steps,a$date, type="l")
plot(a$date,a$steps, type="l")
barplot(a$date,a$steps)
barplot(a$steps,a$date)
barplot(a$steps)
View(data)
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
data <- read.csv(unz("./activity.zip","activity.csv"))
library(reshape2)
data$variable <- "steps"
dailySteps <- dcast(data=data,date~variable, fun.aggregate=sum, value.var="steps", na.rm=TRUE)
barplot(dailySteps$steps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
mean_result <- mean(dailySteps$steps,na.rm=TRUE)
median_result <- median(dailySteps$steps,na.rm=TRUE)
View(dailySteps)
mean_result
median_result
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
mean_result <- mean(dailySteps,na.rm=TRUE)
median_result <- median(dailySteps,na.rm=TRUE)
data$variable <- "steps"
dailySteps <- dcast(data=data,date~variable, fun.aggregate=sum, value.var="steps", na.rm=TRUE)
View(dailySteps)
dailySteps_old <- tapply(data$steps,data$date,sum)
barplot(dailySteps_old, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
mean_result <- mean(dailySteps_old,na.rm=TRUE)
median_result <- median(dailySteps_old,na.rm=TRUE)
View(dailySteps)
library(reshape2)
interval_table <- dcast(data, interval ~ date, value.var="steps")
View(interval_table)
maxDailySteps <- dcast(data=data,date~variable, fun.aggregate=max, value.var="steps", na.rm=TRUE)
data$variable <- "steps"
maxDailySteps <- dcast(data=data,date~variable, fun.aggregate=max, value.var="steps", na.rm=TRUE)
View(data)
View(maxDailySteps)
data <- read.csv(unz("./activity.zip","activity.csv"))
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
mean_result <- mean(dailySteps,na.rm=TRUE)
median_result <- median(dailySteps,na.rm=TRUE)
averageDailySteps <- tapply(data$steps,data$date,mean)
plot(averageDailySteps, type="l", main ="Pattern of average daily steps", ylab="Average Daily steps", xlab="Day")
points(averageDailySteps, pch=19)
library(reshape2)
maxDailySteps <- dcast(data=data,date~variable, fun.aggregate=max, value.var="steps", na.rm=TRUE)
data$variable <- "steps"
maxDailySteps <- dcast(data=data,date~variable, fun.aggregate=max, value.var="steps", na.rm=TRUE)
maxDailySteps
a <- merge(maxDailySteps,data)
View(a)
View(data)
View(maxDailySteps)
data$variable <- "steps"
maxDailySteps <- dcast(data=data,date~variable, fun.aggregate=max, value.var="steps", na.rm=TRUE)
maxDailySteps <- merge(maxDailySteps,data)
maxDailySteps
table(maxDailySteps$interval)
which.max(maxDailySteps$interval)
which.max(table(maxDailySteps$interval))
which.max(table(maxDailySteps$interval))[1]
name(which.max(table(maxDailySteps$interval)))
names(which.max(table(maxDailySteps$interval)))
max(table(maxDailySteps$interval)))
max(table(maxDailySteps$interval))
rm(a)
subset_data <- subset(data, !is.na(data$steps))
avg_intervals <- tapply(subset_data$steps,subset_data$interval,mean)
filled_data <- data
avg_intervals
avg_intervals <- as.data.frame(avg_intervals)
View(avg_intervals)
a <- dcast(data=data,interval~variable, fun.aggregate=mean, value.var="steps", na.rm=TRUE)
View(a)
a
View(data)
data[,c("date","interval")]
a <- merge(data[,c("date","interval")],avg_intervals)
rm(a)
View(avg_intervals)
avg_intervals$interval <- row.names(avg_intervals)
avg_intervals <- dcast(data=data,interval~variable, fun.aggregate=mean, value.var="steps", na.rm=TRUE)
View(avg_intervals)
View(avg_intervals)
a <- merge(data[,c("date","interval")],avg_intervals)
View(a)
simulatedData <- merge(data[,c("date","interval")],avg_intervals,sort="date")
simulatedData <- merge(data[,c("date","interval")],avg_intervals,sort=TRUE)
View(simulatedData)
simulatedData <- merge(data[,c("interval","date")],avg_intervals,sort=TRUE)
View(simulatedData)
library(plyr)
arrange(simulatedData,date,interval)
simulatedData <- arrange(simulatedData,date,interval)
View(simulatedData)
simulatedData <- merge(data[,c("interval","date")],avg_intervals,sort=TRUE)
simulatedData <- arange(simulatedData,date,interval)
simulatedData <- arrange(simulatedData,date,interval)
View(simulatedData)
simulatedData <- merge(avg_intervals,data[,c("interval","date")])
simulatedData <- arrange(simulatedData,date,interval)
View(simulatedData)
View(simulatedData)
simulatedData <- arrange(simulatedData,date,interval)
availableSteps <- !is.na(data$steps)
simulatedData$steps[availableSteps] <- data$steps[availableSteps]
View(simulatedData)
filled_data$day <- wday(filled_data$date,label=TRUE,abbr=FALSE)
library(lubridate)
filled_data$day <- wday(filled_data$date,label=TRUE,abbr=FALSE)
filled_data$day_type <- ifelse(filled_data$day == "Sunday" | filled_data$day == "Saturday","weekend","weekday")
library(lubridate)
simulatedData$day <- wday(simulatedData$date,label=TRUE,abbr=FALSE)
simulatedData$day_type <- ifelse(simulatedData$day == "Sunday" | simulatedData$day == "Saturday","weekend","weekday")
averageSimulateddata <- dcast(simulatedData, interval ~ day_type, fun.aggregate=mean, value.var="steps")
qplot(interval,steps, data=averageSimulateddata, facets=day_type~., geom="line", xlab="interval", ylab="No. of steps")
source('~/.active-rstudio-document', echo=TRUE)
View(simulatedData)
data <- read.csv(unz("./activity.zip","activity.csv"))
data <- read.csv(unz("./activity.zip","activity.csv"))
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
mean_result <- mean(dailySteps,na.rm=TRUE)
median_result <- median(dailySteps,na.rm=TRUE)
averageDailySteps <- tapply(data$steps,data$date,mean)
plot(averageDailySteps, type="l", main ="Pattern of average daily steps", ylab="Average Daily steps", xlab="Day")
points(averageDailySteps, pch=19)
data <- read.csv(unz("./activity.zip","activity.csv"))
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
par(mfrow=c(1,1))
data <- read.csv(unz("./activity.zip","activity.csv"))
dailySteps <- tapply(data$steps,data$date,sum)
barplot(dailySteps, col="blue", main ="Daily steps taken", ylab="Daily steps", xlab="Day")
mean_result <- mean(dailySteps,na.rm=TRUE)
median_result <- median(dailySteps,na.rm=TRUE)
averageDailySteps <- tapply(data$steps,data$date,mean)
plot(averageDailySteps, type="l", main ="Pattern of average daily steps", ylab="Average Daily steps", xlab="Day")
points(averageDailySteps, pch=19)
library(reshape2)
data$variable <- "steps"
maxDailySteps <- dcast(data=data,date~variable, fun.aggregate=max, value.var="steps", na.rm=TRUE)
maxDailySteps <- merge(maxDailySteps,data)
max_days <- max(table(maxDailySteps$interval))
max_interval <- names(which.max(table(maxDailySteps$interval)))
sum(is.na(data$steps))
avg_intervals <- dcast(data=data,interval~variable, fun.aggregate=mean, value.var="steps", na.rm=TRUE)
simulatedData <- merge(data[,c("interval","date")],avg_intervals)
library(plyr)
simulatedData <- arrange(simulatedData,date,interval)
availableSteps <- !is.na(data$steps)
simulatedData$steps[availableSteps] <- data$steps[availableSteps]
simulatedDataDailySteps <- tapply(simulatedData$steps,simulatedData$date,sum)
par(mfrow=c(2,1))
barplot(simulatedDataDailySteps, col="wheat", main ="Daily steps taken (simulated data)", ylab="Daily steps", xlab="Day")
barplot(dailySteps, col="blue", main ="Daily steps taken (original data)", ylab="Daily steps", xlab="Day")
simulatedData_mean_result <- mean(simulatedDataDailySteps,na.rm=TRUE)
simulatedData_median_result <- median(simulatedDataDailySteps,na.rm=TRUE)
simulatedData_mean_result <- mean(simulatedDataDailySteps)
simulatedData_median_result <- median(simulatedDataDailySteps)
simulatedData_mean_result
simulatedData_median_result
View(simulatedData)
library(lubridate)
simulatedData$day <- wday(simulatedData$date,label=TRUE,abbr=FALSE)
simulatedData$day_type <- ifelse(simulatedData$day == "Sunday" | simulatedData$day == "Saturday","weekend","weekday")
View(simulatedData)
averageSimulatedData <- dcast(simulatedData, interval ~ day_type, fun.aggregate=mean, value.var="steps")
averageSimulatedData
View(averageSimulatedData)
melt(averageSimulatedData)
averageSimulatedData <- dcast(simulatedData, interval ~ day_type, fun.aggregate=mean, value.var="steps")
averageSimulatedData <- melt(averageSimulatedData)
View(averageSimulatedData)
simulatedData$day_type <- ifelse(simulatedData$day == "Sunday" | simulatedData$day == "Saturday","weekend","weekday")
averageSimulatedData <- dcast(simulatedData, interval ~ day_type, fun.aggregate=mean, value.var="steps")
View(averageSimulatedData)
averageSimulatedData <- melt(averageSimulatedData, id="interval")
View(averageSimulatedData)
simulatedData$day_type <- ifelse(simulatedData$day == "Sunday" | simulatedData$day == "Saturday","weekend","weekday")
averageSimulatedData <- dcast(simulatedData, interval ~ day_type, fun.aggregate=mean, value.var="steps")
averageSimulatedData <- melt(averageSimulatedData, id="interval",variable.name="day_type",value.name="steps")
averageSimulatedData
View(averageSimulatedData)
qplot(interval,steps, data=averageSimulatedData, facets=day_type~., geom="line", xlab="interval", ylab="No. of steps")
paste0(1000/60),":",1000-(floor(1000)/60)*60))
paste0(1000/60,":",1000-(floor(1000)/60)*60))
paste0(1000/60,":",1000-(floor(1000)/60)*60)
paste0(floor(1000/60),":",1000-(floor(1000)/60)*60))
paste0(floor(1000/60),":",1000-(floor(1000)/60)*60)
paste0(floor(1000/60),":",1000-(floor(1000/60)*60)
)
paste0(floor(1000/60),":",1000-(floor(1000/60)*60))
